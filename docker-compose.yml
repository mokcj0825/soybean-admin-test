name: ${COMPOSE_PROJECT_NAME:-soybean-admin-nest}

services:
  # 添加数据库初始化服务
  db-init:
    build:
      context: backend/
    environment:
      # 同 backend 的环境变量
      DATABASE_URL: "postgresql://${POSTGRES_USER:-soybean}:${POSTGRES_PASSWORD:-soybean@123.}@postgres:${DATABASE_INTERNAL_PORT:-5432}/${POSTGRES_DB:-soybean-admin-nest-backend}?schema=public"
      DIRECT_DATABASE_URL: "postgresql://${POSTGRES_USER:-soybean}:${POSTGRES_PASSWORD:-soybean@123.}@postgres:${DATABASE_INTERNAL_PORT:-5432}/${POSTGRES_DB:-soybean-admin-nest-backend}?schema=public"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      # 挂载 prisma 目录以使用最新的 schema 和迁移文件
      - ./backend/prisma:/usr/src/app/soybean/backend/prisma
    restart: "no"
    command: >
      sh -c "
        if pnpm prisma migrate deploy 2>&1 | tee /tmp/migrate.log | grep -q 'P3005'; then
          echo '检测到数据库已有数据但缺少迁移记录，正在修复...'
          for migration in prisma/migrations/*/; do
            if [ -d \"$$migration\" ] && [ \"$$(basename $$migration)\" != \"migration_lock.toml\" ]; then
              migration_name=$$(basename $$migration)
              echo \"标记迁移为已应用: $$migration_name\"
              pnpm prisma migrate resolve --applied \"$$migration_name\" || true
            fi
          done
          echo '重新应用迁移...'
          pnpm prisma migrate deploy
        elif grep -q 'No pending migrations' /tmp/migrate.log || grep -q 'migrations found' /tmp/migrate.log; then
          echo '迁移已完成'
        fi &&
        pnpm prisma db seed
      "
    networks:
      - soybean-admin

  frontend:
    build:
      context: frontend/
    # image: soybean-admin-frontend:1.2.7
    environment:
      TZ: ${TZ:-Asia/Shanghai}
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "${FRONTEND_PORT:-9527}:80"
    networks:
      - soybean-admin

  backend:
    build:
      context: backend/
    # image: soybean-admin-backend:0.0.1
    environment:
      TZ: ${TZ:-Asia/Shanghai}
      CASBIN_MODEL: ${CASBIN_MODEL:-model.conf}
      NODE_ENV: ${NODE_ENV:-production}
      APP_PORT: ${BACKEND_PORT:-9528}
      DOC_SWAGGER_ENABLE: ${DOC_SWAGGER_ENABLE:-true}
      DOC_SWAGGER_PATH: ${DOC_SWAGGER_PATH:-api-docs}
      DATABASE_URL: "postgresql://${POSTGRES_USER:-soybean}:${POSTGRES_PASSWORD:-soybean@123.}@postgres:${DATABASE_INTERNAL_PORT:-5432}/${POSTGRES_DB:-soybean-admin-nest-backend}?schema=public"
      DIRECT_DATABASE_URL: "postgresql://${POSTGRES_USER:-soybean}:${POSTGRES_PASSWORD:-soybean@123.}@postgres:${DATABASE_INTERNAL_PORT:-5432}/${POSTGRES_DB:-soybean-admin-nest-backend}?schema=public"
      REDIS_HOST: "redis"
      REDIS_PORT: ${REDIS_INTERNAL_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-123456}
      REDIS_DB: ${REDIS_DB:-1}
      JWT_SECRET: ${JWT_SECRET:-JWT_SECRET-soybean-admin-nest@123456!@#.}
      JWT_EXPIRE_IN: ${JWT_EXPIRE_IN:-3600}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET:-REFRESH_TOKEN_EXPIRE_IN-soybean-admin-nest@123456!@#.}
      REFRESH_TOKEN_EXPIRE_IN: ${REFRESH_TOKEN_EXPIRE_IN:-7200}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "${BACKEND_PORT:-9528}:${BACKEND_PORT:-9528}"
    volumes:
      # 挂载 prisma 目录以支持 schema 变更
      - ./backend/prisma:/usr/src/app/soybean/backend/prisma
      - ./backend/Makefile:/usr/src/app/soybean/backend/Makefile
      - ./backend/scripts:/usr/src/app/soybean/backend/scripts
    networks:
      - soybean-admin
    healthcheck:
      test:
        ["CMD", "curl", "-f", "http://backend:9528/v1/route/getConstantRoutes"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    cpus: 2

  postgres:
    image: postgres:16.3
    environment:
      TZ: ${TZ:-Asia/Shanghai}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-soybean@123.}
      POSTGRES_USER: ${POSTGRES_USER:-soybean}
      POSTGRES_DB: ${POSTGRES_DB:-soybean-admin-nest-backend}
    ports:
      - "${DATABASE_PORT:-25432}:${DATABASE_INTERNAL_PORT:-5432}"
    volumes:
      - soybean-admin-postgres_data:/usr/share/docker/postgresql
      - ./deploy/postgres:/docker-entrypoint-initdb.d
    networks:
      - soybean-admin
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-soybean} -d ${POSTGRES_DB:-soybean-admin-nest-backend}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgbouncer:
    image: bitnami/pgbouncer:1.23.1
    container_name: pgbouncer
    hostname: pgbouncer
    restart: always
    environment:
      - PGBOUNCER_DATABASE=*
      - POSTGRESQL_USERNAME=${POSTGRES_USER:-soybean}
      - POSTGRESQL_PASSWORD=${POSTGRES_PASSWORD:-soybean@123.}
      - POSTGRESQL_DATABASE=${POSTGRES_DB:-soybean-admin-nest-backend}
      - POSTGRESQL_HOST=postgres
      - POSTGRESQL_PORT=${DATABASE_INTERNAL_PORT:-5432}
    ports:
      - ${PGBOUNCER_PORT:-6432}:6432
    networks:
      - soybean-admin

  redis:
    image: redis/redis-stack:7.2.0-v11
    environment:
      TZ: ${TZ:-Asia/Shanghai}
    command: redis-server --requirepass ${REDIS_PASSWORD:-123456}
    ports:
      - "${REDIS_PORT:-26379}:${REDIS_INTERNAL_PORT:-6379}"
    volumes:
      - soybean-admin-redis_data:/data
    networks:
      - soybean-admin
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-123456}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  soybean-admin-postgres_data:
  soybean-admin-redis_data:

networks:
  soybean-admin:
